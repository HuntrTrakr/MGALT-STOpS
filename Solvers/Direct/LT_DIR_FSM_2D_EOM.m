function [dY] = LT_DIR_FSM_2D_EOM(t,Y,CONST,OPT,mew_sc,mem_thrust,mem_phi)
% FORM: [dY] = LT_DIR_FSM_2D_EOM(t,Y,CONST,OPT,mew_sc,mem_thrust,mem_phi)
%
% |-----------------------------------------------------------------------
% | NOTES:
% |     -Equations of motion for segmented variable construction for 
% |     low-thrust trajectory optimization. 2D assumption
% |
% |-----------------------------------------------------------------------
% |
% | INPUTS:
% |     -t                  (1,1)       [float]         [unitless]
% |         Time
% |     -Y                  (5,1)       [float]         [unitless]
% |         State vector, see MISC for unpacking
% |     -CONST              (1,1)       [struct]        [unitless]
% |         A struct containing constants used in the calcs. Contains
% |         values for AU, TU, Sun (rad/mu/rp) and (rad/mu/rp/SOI/per) 
% |         for any bodies used in the optimization scheme. This is a 
% |         dynamic struct and will adapt to contain only the necesary 
% |         information
% |     -OPT                (1,1)       [struct]        [unitless]
% |         A struct containing constants user options. Contains the save 
% |         folder, ToF values, and more structs containing informaiton 
% |         for the island model, cost parameters, weighting parameters, 
% |         and all of the islands used in the optimization process
% |     -mew_sc             (1,1)     	[float]         [DU^3/TU^2]
% |         Gravitaional parameter of the spacecraft
% |     -mem_thrust         (1,Nseg)	[bool][float] 	[unitless][N]
% |         Binary indicator if the s/c is thrusting or not
% |         The thrust for each angle
% |     -mem_phi            (1,Nseg) 	[float]         [deg]
% |         Thrust poointing angle for each segment
% |
% |-----------------------------------------------------------------------
% |
% | OUTPUTS:
% |     -dY                 (5,1)       [float]         [unitless]
% |         Derivative of state vector
% |
% |-----------------------------------------------------------------------
% |
% | MISC:
% |     -Unpacking
% |         Y(1) = pos_rad   	(DU) radial position
% |         Y(2) = pos_ang     	(deg) angular position
% |         Y(3) = vel_rad   	(DU/TU) radial velocity
% |         Y(4) = vel_tan      (DU/TU) tangential velocity
% |         Y(5) = mass         (kg) mass
% |
% |     -Used:
% |         [time,Y] = ode45(@MGALT_DIR_FSM_2D_EOM,tspan{1,1}(1,:),...
% |             Y0,options,AU,TU,mew_sc,thrust(1),phi(1))
% |         for i3 = 2:opt_thrust.Nseg
% |             Y0 = Y(end,:)';
% |             seg_coords(i3,:) = Y0;
% |             [time_temp,Y] = ode45(@MGALT_DIR_FSM_2D_EOM,...
% |                 tspan{1,1}(i3,:),Y0,options,AU,TU,mew_sc,...
% |                 thrust(i3),phi(i3))
% |             Y = [Y;Y];
% |             time = [time;time_temp];
% |         end
% |
% |     -References
% |         G. A. Rauwolf and V. L. Coverstone-Carroll, “Near-Optimal Low-Thrust Orbit Transfers Generated by a Genetic Algorithm,” Journal of Spacecraft and Rockets, vol. 33, pp. 859–862, Nov. 1996.
% |
% |-----------------------------------------------------------------------



%% EOM's

% Unpack
pos_rad = Y(1);         % (DU) radial position
pos_ang = Y(2);         % (deg) angular position
vel_rad = Y(3);         % (DU/TU) radial velocity
vel_tan = Y(4);         % (DU/TU) tangential velocity
mass = Y(5);            % (kg) mass

% Interpret if SC is thrusting and what the thrust is
T = getSCThrust(CONST,OPT,pos_rad,mem_thrust);   % (kg*DU/TU^2)

% Derivatives
d_pos_rad = vel_rad;
d_pos_ang = vel_tan/pos_rad*180/pi;
d_vel_rad = vel_tan^2/pos_rad - mew_sc/pos_rad^2 + T*sind(mem_phi)/mass;
d_vel_tan = -vel_rad*vel_tan/pos_rad + T*cosd(mem_phi)/mass;
d_mass = getSCmdot(CONST,OPT,T);       % kg/TU

% Output
dY = [d_pos_rad; d_pos_ang; d_vel_rad; d_vel_tan; d_mass];


end


